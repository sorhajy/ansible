---

- name: Install system packages and DevTools
  apt:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - adb
      - amd64-microcode
      - android-sdk
      - ansible
      - apkinfo
      - apktool
      - apt-mirror
      - apt-transport-https
      - aria2
      - arj
      - arp-scan
      - autossh
      - bash
      - bash-completion
      - black
      - bluez
      - bluez-firmware
      - bluez-tools
      - borgbackup
      - build-essential
      - bzip2
      - ca-certificates
      - clang
      - clinfo
      - cmake
      - composer
      - curl
      - default-jdk
      - default-jdk-headless
      - default-jre
      - default-jre-headless
      - dirmngr
      - docker-compose
      - docker.io
      - duplicity
      - exif
      - fail2ban
      - fastboot
      - firejail
      - firmware-amd-graphics
      - firmware-misc-nonfree
      - gcc
      - git
      - git-lfs
      - gnupg-agent
      - golang
      - hardinfo
      - hashcat
      - hdparm
      - htop
      - i2pd
      - iotop
      - iperf
      - iperf3
      - jo
      - jq
      - ldap-utils
      - libblkid-dev
      - libbz2-dev
      - libffi-dev
      - libgdbm-dev
      - libgl1-mesa-dri
      - libgl1-mesa-dri:i386
      - libglx-mesa0
      - libglx-mesa0:i386
      - libgtk-3-dev
      - libimage-exiftool-perl
      - libkrb5-dev
      - libldap2-dev
      - liblzma-dev
      - libsasl2-dev
      - libsqlite3-dev
      - libssl-dev
      - libxml2
      - libxml2-dev
      - linux-headers-amd64
      - locales-all
      - locate
      - luarocks
      - lz4
      - lzip
      - lzma
      - make
      - mat2
      - mesa-utils
      - mesa-utils-extra
      - mesa-va-drivers
      - mesa-vdpau-drivers
      - mesa-vulkan-drivers
      - mesa-vulkan-drivers:i386
      - mypy
      - ncdu
      - net-tools
      - netcat-openbsd
      - network-manager-l2tp
      - network-manager-l2tp-gnome
      - network-manager-openconnect-gnome
      - network-manager-openvpn-gnome
      - ninja-build
      - nmap
      - nodejs
      - npm
      - openconnect
      - openssh-client
      - openssh-server
      - openvpn
      - php
      - pipenv
      - proxychains4
      - pulseaudio-module-bluetooth
      - pv
      - python3
      - python3-dev
      - python3-pip
      - qrencode
      - rclone
      - rsync
      - ruby-dev
      - rust-gdb
      - rust-lldb
      - rust-src
      - rustc
      - s3cmd
      - samba
      - screen
      - shadowsocks-libev
      - smartmontools
      - snapd
      - software-properties-common
      - speedtest-cli
      - ssh
      - ssss
      - telnet
      - tor
      - tree
      - ufw
      - unace
      - unrar
      - vim
      - virtualenv
      - vulkan-tools
      - watch
      - watch
      - wayland-utils
      - wget
      - wireguard
      - wireguard-tools
      - xrdp
      - xserver-xorg-video-all
      - xz-utils
      - yggdrasil
      - youtube-dl
      - zlib1g-dev
      - zram-tools
      - zsh
      - zsh-autosuggestions
      - zsh-syntax-highlighting
      - zstd

- name: Add the user samba groups
  user:
    name: "{{ os_user }}"
    groups: sambashare
    append: yes

- name: Install filesystems packages
  apt:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - btrfs-compsize
      - btrfs-progs
      - cifs-utils
      - cryfs
      - fuse3
      - gocryptfs
      - hfsprogs
      - hfsutils
      - mdadm
      - s3fs
      - sshfs
      - zfs-fuse

- name: Install Nginx
  apt: 
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - nginx-full
- name: Disable Nginx service
  service:
    name: nginx
    state: stopped
    enabled: no

- name: Install Apache2
  apt: 
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - apache2
- name: Disable Apache2 service
  service:
    name: apache2
    state: stopped
    enabled: no

- name: Enable Docker service
  service:
    name: docker
    state: started
    enabled: yes
- name: Add the user Docker groups
  user:
    name: "{{ os_user }}"
    groups: docker
    append: yes

- name: Create yggdrasil config file
  become: true
  shell: yggdrasil -genconf > /etc/yggdrasil/yggdrasil.conf

- name: Install VM packages
  apt:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      # - qemu
      - qemu-kvm
      - libvirt-daemon
      - libvirt-clients
      - libvirt-daemon-system
      - virtinst
      - ebtables
      - bridge-utils
      - vagrant
- name: Add the user libvirt groups
  user:
    name: "{{ os_user }}"
    groups: libvirt
    append: yes
- name: Start & enable libvirt
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items:
  - libvirtd-admin.socket
  - libvirtd.socket
  - libvirtd-ro.socket

- name: Install DBs
  apt: 
    name: "{{ packages }}"
    state: present
  vars:
    packages:
      - redis
      - redis-tools
      - redis-server
      - postgresql
      - postgresql-client
      - default-mysql-server
      - default-mysql-client
      - sqlite3

# Services
- name: Enable autoload & start ufw service
  service:
    name: ufw
    state: started
    enabled: yes
- name: Reset UFW
  become: true
  community.general.ufw:
    state: reset
- name: Allow all access to port 22
  become: true
  community.general.ufw:
    rule: allow
    port: '22'
- name: Allow all access to port 80
  become: true
  community.general.ufw:
    rule: allow
    port: '80'
- name: Allow all access to port 443
  become: true
  community.general.ufw:
    rule: allow
    port: '443'
- name: Allow all access from RFC1918 networks to this host
  become: true
  community.general.ufw:
    rule: allow
    src: '{{ item }}'
  loop:
    - 127.0.0.0/8
    - 10.0.0.0/8
    - 172.16.0.0/12
    - 192.168.0.0/16
- name: Allow all access from Docker networks to this host
  become: true
  community.general.ufw:
    rule: allow
    src: '{{ item }}'
  loop:
    # Docker subnet
    - 172.17.0.0/16
- name: Allow access for Yggdrasil
  become: true
  community.general.ufw:
    rule: allow
    src: '{{ item }}'
  loop:
    - ff00::/8
- name: Allow IPv6
  become: true
  community.general.ufw:
    rule: allow
    proto: ipv6
- name: Reject everything and enable UFW
  become: true
  community.general.ufw:
    state: enabled
    policy: reject
- name: Reload UFW
  become: true
  community.general.ufw:
    state: reloaded

- name: Configure enabled services
  service:
    name: "{{ item }}"
    state: started
    enabled: true
  with_items:
  - ufw
  - sshd
  - libvirtd
  - tor
  - i2pd
  - xrdp
  - yggdrasil

- name: Configure disabled services
  service:
    name: "{{ item }}"
    state: stopped
    enabled: false
  with_items:
  - shadowsocks-libev
  - redis-server
  - postgresql
  - mysql

- name: Copy wallpaper
  copy:
    src: "files/Wallpaper"
    dest: "/home/{{os_user}}/Pictures/"
    owner: "{{ os_user }}"
    group: "{{ os_user }}"
    mode: '0444'

- name: Check root SSH dir
  file: 
    path: "/root/.ssh"
    state: directory

- name: Check SSH dir
  file: 
    path: "/home/{{ os_user }}/.ssh"
    state: directory

- name: Inspect root SSH key
  openssh_keypair:
    path: "/root/.ssh/id_rsa"
    type: rsa
    size: 4096
    state: present
    force: no
  become: true

- name: Inspect user SSH key
  openssh_keypair:
    path: "/home/{{ os_user }}/.ssh/id_rsa"
    type: rsa
    size: 4096
    state: present
    force: no
  become: true
  become_user: "{{ os_user }}"

- name: Create git lib dir
  file:
    path: "/opt/git"
    state: directory
    owner: "{{ os_user }}"
    group: "{{ os_user }}"
    mode: "0777"

- name: Install VimPlug
  become: true
  become_user: "{{ os_user }}"
  command: "curl -s -fLo /home/{{ os_user }}/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"

- name: Config vimrc
  template:
    src: vimrc.j2
    dest: "/home/{{ os_user }}/.vimrc"
    owner: "{{ os_user }}"
    group: "{{ os_user }}"
    mode: '0640'
